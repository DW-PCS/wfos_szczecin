'use client';

import { FAQComponent, FAQItemType } from '@/types/faq';
import { useState } from 'react';

interface FAQFormData {
  question: string;
  answer: string;
  category: string;
  popular: boolean;
  isActive: boolean;
  order: number;
}

export function useFAQForm(initialData?: FAQComponent) {
  const [formData, setFormData] = useState({
    name: initialData?.name || '',
    description: initialData?.description || '',
    placement: initialData?.placement || 'homepage',
    customPlacement: initialData?.customPlacement || '',
    isActive: initialData?.isActive ?? true,
    faqItems: initialData?.faqItems || [],
  });

  const [currentFAQ, setCurrentFAQ] = useState<FAQFormData>({
    question: '',
    answer: '',
    category: 'Wnioski',
    popular: false,
    isActive: true,
    order: (formData.faqItems?.length || 0) + 1,
  });

  const [editingFAQIndex, setEditingFAQIndex] = useState<number | null>(null);

  const handleFormDataChange = (data: Partial<typeof formData>) => {
    setFormData(prev => ({ ...prev, ...data }));
  };

  const handleCurrentFAQChange = (data: Partial<FAQFormData>) => {
    setCurrentFAQ(prev => ({ ...prev, ...data }));
  };

  const addFAQ = () => {
    if (!currentFAQ.question || !currentFAQ.answer) return;

    const newFAQ: FAQItemType = {
      id: Date.now(), // In real app, this would be generated by backend
      question: currentFAQ.question!,
      answer: currentFAQ.answer!,
      category: currentFAQ.category!,
      popular: currentFAQ.popular!,
      isActive: currentFAQ.isActive!,
      order: currentFAQ.order!,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    if (editingFAQIndex !== null) {
      // Update existing FAQ
      const updatedFAQs = [...formData.faqItems];
      updatedFAQs[editingFAQIndex] = { ...newFAQ, id: formData.faqItems[editingFAQIndex].id };
      setFormData(prev => ({ ...prev, faqItems: updatedFAQs }));
      setEditingFAQIndex(null);
    } else {
      // Add new FAQ
      setFormData(prev => ({
        ...prev,
        faqItems: [...prev.faqItems, newFAQ],
      }));
    }

    resetCurrentFAQ();
  };

  const editFAQ = (index: number) => {
    const faq = formData.faqItems[index];
    setCurrentFAQ({
      question: faq.question,
      answer: faq.answer,
      category: faq.category,
      popular: faq.popular ?? false,
      isActive: faq.isActive,
      order: faq.order,
    });
    setEditingFAQIndex(index);
  };

  const deleteFAQ = (index: number) => {
    const updatedFAQs = formData.faqItems.filter((_, i) => i !== index);
    setFormData(prev => ({ ...prev, faqItems: updatedFAQs }));
  };

  const moveFAQ = (index: number, direction: 'up' | 'down') => {
    const items = [...formData.faqItems];
    const newIndex = direction === 'up' ? index - 1 : index + 1;

    if (newIndex < 0 || newIndex >= items.length) return;

    [items[index], items[newIndex]] = [items[newIndex], items[index]];

    // Update order numbers
    items.forEach((item, i) => {
      item.order = i + 1;
    });

    setFormData(prev => ({ ...prev, faqItems: items }));
  };

  const resetCurrentFAQ = () => {
    setCurrentFAQ({
      question: '',
      answer: '',
      category: 'Wnioski',
      popular: false,
      isActive: true,
      order: formData.faqItems.length + 1,
    });
  };

  const cancelEdit = () => {
    setEditingFAQIndex(null);
    resetCurrentFAQ();
  };

  const isFormValid = () => {
    return formData.name.trim() !== '' && formData.description.trim() !== '';
  };

  const canAddFAQ = () => {
    return currentFAQ.question.trim() !== '' && currentFAQ.answer.trim() !== '';
  };

  const getComponentData = (): FAQComponent => {
    return {
      id: initialData?.id || Date.now(),
      name: formData.name,
      description: formData.description,
      placement: formData.placement as any,
      customPlacement: formData.customPlacement,
      isActive: formData.isActive,
      faqItems: formData.faqItems,
      createdAt: initialData?.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
  };

  return {
    formData,
    currentFAQ,
    editingFAQIndex,
    handleFormDataChange,
    handleCurrentFAQChange,
    addFAQ,
    editFAQ,
    deleteFAQ,
    moveFAQ,
    cancelEdit,
    isFormValid,
    canAddFAQ,
    getComponentData,
  };
}
